# -*- coding: utf-8 -*-
"""
Created on Mon Apr 23 10:28:45 2018

@author: Caden
"""

import numpy as np
#----------------------------------------------------------------------------------------------------------------------------------------
#多维数组
#----------------------------------------------------------------------------------------------------------------------------------------
#数组的元素类型可以通过dtype属性获得
c = np.array([[1, 2, 3, 4],[4, 5, 6, 7], [7, 8, 9, 10]])
print(c.dtype)

#通过shape属性获取、改变数组形状，可以用-1代替4或3中的一个，它会自动补全形状
print(c.shape)
c.shape=4,3                      
print(c.shape)

#数组的reshape方法可以不改变原数组，但d和a内存你地址相同，改变d会同时改变a
a = np.array([1, 2, 3, 4])
d=a.reshape(2,-1)
"""
d
Out[44]: 
array([[1, 2],
       [3, 4]])

a
Out[45]: array([1, 2, 3, 4])
"""

#np.array()的dtype参数可以在创建数组时指定元素类型
e=np.array([[1, 2, 3, 4],[4, 5, 6, 7], [7, 8, 9, 10]], dtype=np.float)
f=np.array([[1, 2, 3, 4],[4, 5, 6, 7], [7, 8, 9, 10]], dtype=np.complex)
print(e,f)
"""
[[ 1.  2.  3.  4.]
 [ 4.  5.  6.  7.]
 [ 7.  8.  9. 10.]] [[ 1.+0.j  2.+0.j  3.+0.j  4.+0.j]
 
 [ 4.+0.j  5.+0.j  6.+0.j  7.+0.j]
 [ 7.+0.j  8.+0.j  9.+0.j 10.+0.j]]
"""

#np.arange()直接生成一维数组，用法类似range()，np.linspace()生成指定个数的一维数组
a=np.arange(0,1,0.1)
b=np.linspace(0,1,10)
print(a,b)
"""
[0.  0.1 0.2 0.3 0.4 0.5 0.6 0.7 0.8 0.9] 

[0.         0.11111111 0.22222222 0.33333333 0.44444444 0.55555556 0.66666667 0.77777778 0.88888889 1.        ]
"""

#np.logspace()与np.linspace()类似，但产生的是等比一维数组，相当于对后者取base=10的指数运算
c=np.logspace(0,1,10)
print(c)
"""
[ 1.          1.29154967  1.66810054  2.15443469  2.7825594  3.59381366  4.64158883  5.9948425  7.74263683 10.        ]
"""
d=np.logspace(0,1,10,base=2,endpoint=False)
print(d)
"""
[1.         1.07177346 1.14869835 1.23114441 1.31950791 1.41421356 1.51571657 1.62450479 1.74110113 1.86606598]
"""

#np.empty()随机分配内存，不进行初始，默认元素类型是float
e=np.empty([2, 2])
f=np.empty([2, 2], dtype=int)
print(e,'\n',f)
"""
[[4.         5.0396842 ]
 [6.34960421 8.        ]] 

 [[1500    0]
 [1500    0]]
 """

#np.zeros()和np.ones()初始化0数组和单位数组
g=np.zeros((2,3,4))
print(g,'\n','-'*17)
h=np.ones((3,3),int)
print(h)
"""
[[[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]

 [[0. 0. 0. 0.]
  [0. 0. 0. 0.]
  [0. 0. 0. 0.]]] 
 -----------------
[[1 1 1]
 [1 1 1]
 [1 1 1]]
 """

#np.fromfuction()可以通过自定义函数生成指定维数的数组，数组中每个元素的值是该元素下标的函数，注意下标是从0开始
#生成15*15乘法表
def func(row,col):
    return (row+1)*(col+1)
b=np.fromfunction(func,[15,15],dtype=int)
print(b)
"""
[[  1   2   3   4   5   6   7   8   9  10  11  12  13  14  15]
 [  2   4   6   8  10  12  14  16  18  20  22  24  26  28  30]
 [  3   6   9  12  15  18  21  24  27  30  33  36  39  42  45]
 [  4   8  12  16  20  24  28  32  36  40  44  48  52  56  60]
 [  5  10  15  20  25  30  35  40  45  50  55  60  65  70  75]
 [  6  12  18  24  30  36  42  48  54  60  66  72  78  84  90]
 [  7  14  21  28  35  42  49  56  63  70  77  84  91  98 105]
 [  8  16  24  32  40  48  56  64  72  80  88  96 104 112 120]
 [  9  18  27  36  45  54  63  72  81  90  99 108 117 126 135]
 [ 10  20  30  40  50  60  70  80  90 100 110 120 130 140 150]
 [ 11  22  33  44  55  66  77  88  99 110 121 132 143 154 165]
 [ 12  24  36  48  60  72  84  96 108 120 132 144 156 168 180]
 [ 13  26  39  52  65  78  91 104 117 130 143 156 169 182 195]
 [ 14  28  42  56  70  84  98 112 126 140 154 168 182 196 210]
 [ 15  30  45  60  75  90 105 120 135 150 165 180 195 210 225]]
"""






#----------------------------------------------------------------------------------------------------------------------------------------
#结构数组
#----------------------------------------------------------------------------------------------------------------------------------------







